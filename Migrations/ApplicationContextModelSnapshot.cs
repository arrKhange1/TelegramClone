// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramClone.Data;

namespace TelegramClone.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TelegramClone.Models.ChatCategory", b =>
                {
                    b.Property<Guid>("ChatCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatCategoryId");

                    b.ToTable("ChatCategories");

                    b.HasData(
                        new
                        {
                            ChatCategoryId = new Guid("5dee7a70-d366-4ee2-92ec-3779f47f0b52"),
                            ChatCategoryName = "private"
                        },
                        new
                        {
                            ChatCategoryId = new Guid("c4084d91-3e88-49f6-a5d8-bbe6adafb284"),
                            ChatCategoryName = "group"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChat", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupMembers")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupChatId");

                    b.HasIndex("ChatCategoryId");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasFilter("[LastMessageId] IS NOT NULL");

                    b.ToTable("GroupChats");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatMessage", b =>
                {
                    b.Property<Guid>("GroupChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupChatMessageTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupChatMessageId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("GroupChatMessageTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChatMessages");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatMessageType", b =>
                {
                    b.Property<Guid>("GroupChatMessageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupChatMessageTypeId");

                    b.ToTable("GroupChatMessageTypes");

                    b.HasData(
                        new
                        {
                            GroupChatMessageTypeId = new Guid("a89afbe2-9e3b-46d7-8131-be4d07553313"),
                            Type = "message"
                        },
                        new
                        {
                            GroupChatMessageTypeId = new Guid("bd5733bd-ce03-4281-acdb-fe5c3e95cc40"),
                            Type = "notification"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatUser", b =>
                {
                    b.Property<Guid>("GroupChatUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnreadMessages")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupChatUserId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChatUsers");
                });

            modelBuilder.Entity("TelegramClone.Models.PrivateChat", b =>
                {
                    b.Property<Guid>("PrivateChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnreadMsgsByFirst")
                        .HasColumnType("int");

                    b.Property<int>("UnreadMsgsBySecond")
                        .HasColumnType("int");

                    b.HasKey("PrivateChatId");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasFilter("[LastMessageId] IS NOT NULL");

                    b.HasIndex("SecondParticipantId");

                    b.ToTable("PrivateChats");
                });

            modelBuilder.Entity("TelegramClone.Models.PrivateChatMessage", b =>
                {
                    b.Property<Guid>("PrivateChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PrivateChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivateChatMessageId");

                    b.HasIndex("PrivateChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("PrivateChatMessages");
                });

            modelBuilder.Entity("TelegramClone.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TelegramClone.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("11e9ff6f-e5f3-4d0d-82e0-393017290c50"),
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleId = new Guid("118d10a2-09ad-490e-974b-43ddf1a10b0e"),
                            RoleName = "user"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c4c534d5-4d37-47c4-916e-fa198d632f6a"),
                            ConnectionStatus = "online",
                            Password = "123456",
                            RoleId = new Guid("11e9ff6f-e5f3-4d0d-82e0-393017290c50"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.UserContact", b =>
                {
                    b.Property<Guid>("UserContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserContactId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId", "ContactId")
                        .IsUnique();

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChat", b =>
                {
                    b.HasOne("TelegramClone.Models.ChatCategory", "ChatCategory")
                        .WithMany()
                        .HasForeignKey("ChatCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.GroupChatMessage", "LastMessage")
                        .WithOne("GroupChat")
                        .HasForeignKey("TelegramClone.Models.GroupChat", "LastMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChatCategory");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatMessage", b =>
                {
                    b.HasOne("TelegramClone.Models.GroupChat", null)
                        .WithMany("GroupChatMessages")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.GroupChatMessageType", "GroupChatMessageType")
                        .WithMany("GroupChatMessages")
                        .HasForeignKey("GroupChatMessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("GroupChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChatMessageType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatUser", b =>
                {
                    b.HasOne("TelegramClone.Models.GroupChat", "GroupChat")
                        .WithMany("GroupChatUsers")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("GroupChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.PrivateChat", b =>
                {
                    b.HasOne("TelegramClone.Models.User", "FirstParticipant")
                        .WithMany("PrivateChatsFirstParticipants")
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.PrivateChatMessage", "LastMessage")
                        .WithOne("PrivateChat")
                        .HasForeignKey("TelegramClone.Models.PrivateChat", "LastMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TelegramClone.Models.User", "SecondParticipant")
                        .WithMany("PrivateChatsSecondParticipants")
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("LastMessage");

                    b.Navigation("SecondParticipant");
                });

            modelBuilder.Entity("TelegramClone.Models.PrivateChatMessage", b =>
                {
                    b.HasOne("TelegramClone.Models.PrivateChat", null)
                        .WithMany("PrivateChatMessages")
                        .HasForeignKey("PrivateChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "Sender")
                        .WithMany("PrivateChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TelegramClone.Models.RefreshToken", b =>
                {
                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.User", b =>
                {
                    b.HasOne("TelegramClone.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TelegramClone.Models.UserContact", b =>
                {
                    b.HasOne("TelegramClone.Models.User", "Contact")
                        .WithMany("UserContactsContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("UserContactsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChat", b =>
                {
                    b.Navigation("GroupChatMessages");

                    b.Navigation("GroupChatUsers");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatMessage", b =>
                {
                    b.Navigation("GroupChat");
                });

            modelBuilder.Entity("TelegramClone.Models.GroupChatMessageType", b =>
                {
                    b.Navigation("GroupChatMessages");
                });

            modelBuilder.Entity("TelegramClone.Models.PrivateChat", b =>
                {
                    b.Navigation("PrivateChatMessages");
                });

            modelBuilder.Entity("TelegramClone.Models.PrivateChatMessage", b =>
                {
                    b.Navigation("PrivateChat");
                });

            modelBuilder.Entity("TelegramClone.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TelegramClone.Models.User", b =>
                {
                    b.Navigation("GroupChatMessages");

                    b.Navigation("GroupChatUsers");

                    b.Navigation("PrivateChatMessages");

                    b.Navigation("PrivateChatsFirstParticipants");

                    b.Navigation("PrivateChatsSecondParticipants");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserContactsContacts");

                    b.Navigation("UserContactsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
