// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramClone.Data;

namespace TelegramClone.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221119111106_AddDataInMessageTypersTable")]
    partial class AddDataInMessageTypersTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TelegramClone.Models.Chat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupMembers")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatId");

                    b.HasIndex("ChatCategoryId");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasFilter("[LastMessageId] IS NOT NULL");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("TelegramClone.Models.ChatCategory", b =>
                {
                    b.Property<Guid>("ChatCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatCategoryId");

                    b.ToTable("ChatCategories");

                    b.HasData(
                        new
                        {
                            ChatCategoryId = new Guid("4e28dfe7-4020-4d93-9ea8-d3cae0cffc75"),
                            ChatCategoryName = "private"
                        },
                        new
                        {
                            ChatCategoryId = new Guid("1c74c3cb-2120-40a2-81da-2f322085db90"),
                            ChatCategoryName = "group"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.ChatUser", b =>
                {
                    b.Property<Guid>("ChatUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatUserId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("TelegramClone.Models.Dialog", b =>
                {
                    b.Property<Guid>("DialogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DialogId");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasFilter("[LastMessageId] IS NOT NULL");

                    b.HasIndex("SecondParticipantId");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("TelegramClone.Models.DialogMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.HasIndex("DialogId");

                    b.HasIndex("SenderId");

                    b.ToTable("DialogMessages");
                });

            modelBuilder.Entity("TelegramClone.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MessageTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatUserId");

                    b.HasIndex("MessageTypeId")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TelegramClone.Models.MessageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("786e20ae-bc6b-472a-bd15-14beee7121ae"),
                            Type = "message"
                        },
                        new
                        {
                            Id = new Guid("2c83753e-c3be-4a9b-8b6f-07db48bdc951"),
                            Type = "notification"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TelegramClone.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("d5943e1f-61f7-4ed5-b0c8-55bb1f374fd5"),
                            RoleName = "admin"
                        },
                        new
                        {
                            RoleId = new Guid("72f2fc42-c65c-43ac-86dd-8bdd3ff0e1df"),
                            RoleName = "user"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d089d04a-ea2f-443f-94dc-544781e97a09"),
                            ConnectionStatus = "online",
                            Password = "123456",
                            RoleId = new Guid("d5943e1f-61f7-4ed5-b0c8-55bb1f374fd5"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TelegramClone.Models.UserContact", b =>
                {
                    b.Property<Guid>("UserContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserContactId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId", "ContactId")
                        .IsUnique();

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("TelegramClone.Models.Chat", b =>
                {
                    b.HasOne("TelegramClone.Models.ChatCategory", "ChatCategory")
                        .WithMany()
                        .HasForeignKey("ChatCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.Message", "LastMessage")
                        .WithOne("Chat")
                        .HasForeignKey("TelegramClone.Models.Chat", "LastMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ChatCategory");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("TelegramClone.Models.ChatUser", b =>
                {
                    b.HasOne("TelegramClone.Models.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.Dialog", b =>
                {
                    b.HasOne("TelegramClone.Models.User", "FirstParticipant")
                        .WithMany("DialogsFirstParticipants")
                        .HasForeignKey("FirstParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.DialogMessage", "LastMessage")
                        .WithOne("Dialog")
                        .HasForeignKey("TelegramClone.Models.Dialog", "LastMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TelegramClone.Models.User", "SecondParticipant")
                        .WithMany("DialogsSecondParticipants")
                        .HasForeignKey("SecondParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstParticipant");

                    b.Navigation("LastMessage");

                    b.Navigation("SecondParticipant");
                });

            modelBuilder.Entity("TelegramClone.Models.DialogMessage", b =>
                {
                    b.HasOne("TelegramClone.Models.Dialog", null)
                        .WithMany("DialogMessages")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "Sender")
                        .WithMany("DialogMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TelegramClone.Models.Message", b =>
                {
                    b.HasOne("TelegramClone.Models.ChatUser", "ChatUser")
                        .WithMany("Messages")
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.MessageType", "MessageType")
                        .WithOne("Message")
                        .HasForeignKey("TelegramClone.Models.Message", "MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatUser");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("TelegramClone.Models.RefreshToken", b =>
                {
                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.User", b =>
                {
                    b.HasOne("TelegramClone.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TelegramClone.Models.UserContact", b =>
                {
                    b.HasOne("TelegramClone.Models.User", "Contact")
                        .WithMany("UserContactsContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TelegramClone.Models.User", "User")
                        .WithMany("UserContactsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramClone.Models.Chat", b =>
                {
                    b.Navigation("ChatUsers");
                });

            modelBuilder.Entity("TelegramClone.Models.ChatUser", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TelegramClone.Models.Dialog", b =>
                {
                    b.Navigation("DialogMessages");
                });

            modelBuilder.Entity("TelegramClone.Models.DialogMessage", b =>
                {
                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("TelegramClone.Models.Message", b =>
                {
                    b.Navigation("Chat");
                });

            modelBuilder.Entity("TelegramClone.Models.MessageType", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("TelegramClone.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TelegramClone.Models.User", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("DialogMessages");

                    b.Navigation("DialogsFirstParticipants");

                    b.Navigation("DialogsSecondParticipants");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserContactsContacts");

                    b.Navigation("UserContactsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
